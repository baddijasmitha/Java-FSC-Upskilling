Project Theme: "Local Community Event Portal"
Users can view upcoming events, register, filter events by category or location, and interact
dynamically with the portal.

//task1. JavaScript Basics & Setup
index.html
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>Community Event Portal</title>
</head>
<body>
  <h1>Welcome to the Community Event Portal</h1>
  <script src="main.js"></script>
</body>
</html>
//main.js
console.log("Welcome to the Community Portal");

window.onload = function () {
  alert("Page is fully loaded!");
};

//task2. Syntax, Data Types, and Operators
const eventName = "Music Festival";
const eventDate = "2025-06-15";
let seatsAvailable = 30;
const eventInfo = `${eventName} on ${eventDate} has ${seatsAvailable} seats left.`;
console.log(eventInfo);
// Simulate a user registering
seatsAvailable--;
console.log(`Seats after registration: ${seatsAvailable}`);

//task3. Conditionals, Loops, and Error Handling
const events = [
  { name: "Music Night", date: "2025-06-20", seats: 10 },
  { name: "Art Show", date: "2024-12-01", seats: 0 },
  { name: "Tech Talk", date: "2025-07-10", seats: 25 }
];

events.forEach(event => {
  const isUpcoming = new Date(event.date) > new Date();
  const hasSeats = event.seats > 0;

  if (isUpcoming && hasSeats) {
    console.log(`Event: ${event.name} - ${event.date}`);
  } else {
    console.log(`Event "${event.name}" is not available.`);
  }
});

// Registration logic
function register(eventName) {
  try {
    const event = events.find(e => e.name === eventName);
    if (!event || event.seats <= 0) throw new Error("Cannot register");

    event.seats--;
    console.log(`Registered for ${event.name}. Remaining seats: ${event.seats}`);
  } catch (error) {
    console.error("Registration failed:", error.message);
  }
}
register("Tech Talk");

//task4. Functions, Scope, Closures, Higher-Order Functions
function addEvent(events, newEvent) {
  events.push(newEvent);
}

function registerUser(eventName) {
  const event = events.find(e => e.name === eventName);
  if (event && event.seats > 0) event.seats--;
}

function filterEventsByCategory(events, category) {
  return events.filter(event => event.category === category);
}

// Closure to track registrations
function categoryTracker() {
  const counts = {};
  return function register(category) {
    counts[category] = (counts[category] || 0) + 1;
    return counts[category];
  };
}

const trackCategory = categoryTracker();
trackCategory("Music");
trackCategory("Art");

// Higher-order filter
function dynamicFilter(events, callback) {
  return events.filter(callback);
}

const techEvents = dynamicFilter(events, e => e.name.includes("Tech"));

//task 5. Objects and Prototypes
function Event(name, date, seats) {
  this.name = name;
  this.date = date;
  this.seats = seats;
}

Event.prototype.checkAvailability = function () {
  return this.seats > 0;
};

const workshop = new Event("Baking Workshop", "2025-08-01", 20);
console.log(workshop.checkAvailability());

console.log(Object.entries(workshop));

//task6. Arrays and Methods
const allEvents = [];

allEvents.push({ name: "Baking Class", category: "Workshop", seats: 15 });
allEvents.push({ name: "Jazz Night", category: "Music", seats: 30 });

const musicEvents = allEvents.filter(e => e.category === "Music");

const displayCards = allEvents.map(e => `Event: ${e.name}`);
console.log(displayCards);

//task 7. DOM Manipulation
document.addEventListener("DOMContentLoaded", () => {
  const container = document.querySelector("#event-container");

  allEvents.forEach(event => {
    const card = document.createElement("div");
    card.className = "event-card";
    card.textContent = `${event.name} - ${event.seats} seats`;
    container.appendChild(card);
  });
});

//task8. Event Handling
document.querySelectorAll(".register-btn").forEach(btn => {
  btn.onclick = () => alert("Registered!");
});

document.querySelector("#categoryFilter").onchange = (e) => {
  console.log("Filter by category:", e.target.value);
};

document.querySelector("#searchInput").onkeydown = (e) => {
  if (e.key === "Enter") console.log("Searching for:", e.target.value);
};

//task 9. Async JS, Promises, Async/Await
// Using Promises
fetch("https://mockapi.io/events")
  .then(response => response.json())
  .then(data => console.log("Fetched events:", data))
  .catch(error => console.error("Error fetching:", error));

// Using async/await
async function loadEvents() {
  console.log("Loading...");
  try {
    const response = await fetch("https://mockapi.io/events");
    const events = await response.json();
    console.log("Events loaded:", events);
  } catch (err) {
    console.error("Error:", err);
  }
}

//task10. Modern JavaScript Features
const defaultEvent = (name = "Unnamed", date = "TBD", seats = 0) => ({
  name, date, seats
});
const { name, seats } = defaultEvent("Poetry Slam", "2025-09-10", 50);
const copiedEvents = [...allEvents];

//task11. Working with Forms
<form id="registerForm">
  <input name="username" required />
  <input name="email" type="email" required />
  <select name="eventName">
    <option>Baking Class</option>
  </select>
  <button type="submit">Register</button>
</form>
<div id="error"></div>

<script>
document.getElementById("registerForm").addEventListener("submit", function(e) {
  e.preventDefault();
  const { username, email, eventName } = e.target.elements;
  if (!username.value || !email.value) {
    document.getElementById("error").textContent = "All fields required.";
  } else {
    console.log("Form submitted:", username.value, email.value, eventName.value);
  }
});
</script>

// task12. AJAX & Fetch API
function submitRegistration(data) {
  console.log("Submitting registration...");

  setTimeout(() => {
    fetch("https://mockapi.io/register", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(data)
    })
      .then(res => res.json())
      .then(response => alert("Success: " + response.message))
      .catch(err => alert("Error submitting form"));
  }, 2000);
}

//task13. Debugging and Testing
function debugFormSubmission(data) {
  console.log("Form data:", data);

  fetch("https://mockapi.io/register", {
    method: "POST",
    body: JSON.stringify(data),
    headers: { "Content-Type": "application/json" }
  })
    .then(res => res.json())
    .then(result => console.log("Success:", result))
    .catch(err => console.error("Failed:", err));
}

// task14. jQuery and JS Frameworks
<!-- jQuery script should be included first -->
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script>
  $('#registerBtn').click(() => {
    alert("Registered via jQuery!");
  });

  $('.event-card').fadeOut(500).fadeIn(500);

  // Benefit of React or Vue
  console.log("Benefit: React provides virtual DOM and state management, making UI updates more efficient.");
</script>

